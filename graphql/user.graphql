enum TYPE_SEX
{
  male,
  female,
  couple,
  male_couple,
  female_couple
}

type User 
{
  id: ID!
  role: String!
  name: String!
  lastname: String!
  email: String!
  country: String!
  age: Int!
  sex: TYPE_SEX!
  nconversations: Int @count(relation: "conversations") 
  nfriends: Int @count(relation: "friends") 
  nmessages: Int @count(relation: "messages")
  nfriendrequests: Int @count(relation: "friendrequests")
  created_at: DateTime!
  updated_at: DateTime!
}

input userUpdate
{
  id: ID! @rules(apply: ["auth"])
  name: String!
  lastname: String!
  email: String!
  country: String!
  age: Int!
  sex: String!	
}

extend type Query 
{
  users: [User!]! @paginate(defaultCount: 10)
  user(id: ID @eq): User @find
  me: User! @auth
}

extend type Mutation
{
	userUpdate(input: userUpdate! @spread): User! @update 
	userDelete(id: ID! @eq): User @delete
  
  userUpgrade(id: ID! @eq): User! @field(resolver: "UserMutation@upgrade")
  userDowngrade(id: ID! @eq): User! @field(resolver: "UserMutation@downgrade")
}
